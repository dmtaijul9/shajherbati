# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  parcel(
    where: ParcelWhereInput! = {}
    orderBy: [ParcelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Parcel!]
  parcelCount(where: ParcelWhereInput! = {}): Int
  userType: String
  bkash: String
  fbPageName: String
  address: String
  paymentDue: Float
  withdrawn(
    where: WithdrawWhereInput! = {}
    orderBy: [WithdrawOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Withdraw!]
  withdrawnCount(where: WithdrawWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  products: ProductManyRelationFilter
  parcel: ParcelManyRelationFilter
  userType: StringNullableFilter
  bkash: StringFilter
  fbPageName: StringFilter
  address: StringFilter
  paymentDue: FloatNullableFilter
  withdrawn: WithdrawManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ParcelManyRelationFilter {
  every: ParcelWhereInput
  some: ParcelWhereInput
  none: ParcelWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input WithdrawManyRelationFilter {
  every: WithdrawWhereInput
  some: WithdrawWhereInput
  none: WithdrawWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  userType: OrderDirection
  bkash: OrderDirection
  fbPageName: OrderDirection
  address: OrderDirection
  paymentDue: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  products: ProductRelateToManyForUpdateInput
  parcel: ParcelRelateToManyForUpdateInput
  userType: String
  bkash: String
  fbPageName: String
  address: String
  paymentDue: Float
  withdrawn: WithdrawRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ParcelRelateToManyForUpdateInput {
  disconnect: [ParcelWhereUniqueInput!]
  set: [ParcelWhereUniqueInput!]
  create: [ParcelCreateInput!]
  connect: [ParcelWhereUniqueInput!]
}

input WithdrawRelateToManyForUpdateInput {
  disconnect: [WithdrawWhereUniqueInput!]
  set: [WithdrawWhereUniqueInput!]
  create: [WithdrawCreateInput!]
  connect: [WithdrawWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  products: ProductRelateToManyForCreateInput
  parcel: ParcelRelateToManyForCreateInput
  userType: String
  bkash: String
  fbPageName: String
  address: String
  paymentDue: Float
  withdrawn: WithdrawRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ParcelRelateToManyForCreateInput {
  create: [ParcelCreateInput!]
  connect: [ParcelWhereUniqueInput!]
}

input WithdrawRelateToManyForCreateInput {
  create: [WithdrawCreateInput!]
  connect: [WithdrawWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  category: String
  price: Float
  brand: String
  countInStock: Float
  description: String
  createdAt: DateTime
  user: User
  productImg(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  productImgCount(where: ImageWhereInput! = {}): Int
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  category: StringNullableFilter
  price: FloatFilter
  brand: StringFilter
  countInStock: FloatFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  user: UserWhereInput
  productImg: ImageManyRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  category: OrderDirection
  price: OrderDirection
  brand: OrderDirection
  countInStock: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input ProductUpdateInput {
  name: String
  category: String
  price: Float
  brand: String
  countInStock: Float
  description: String
  createdAt: DateTime
  user: UserRelateToOneForUpdateInput
  productImg: ImageRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  category: String
  price: Float
  brand: String
  countInStock: Float
  description: String
  createdAt: DateTime
  user: UserRelateToOneForCreateInput
  productImg: ImageRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

type Image {
  id: ID!
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
}

input ImageOrderByInput {
  id: OrderDirection
}

input ImageUpdateInput {
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  image: ImageFieldInput
}

type Parcel {
  id: ID!
  name: String
  address: String
  phoneNumber: String
  sellPrice: Float
  deliveryCharge: Float
  createdAt: DateTime
  shippingMethod: String
  status: String
  user: User
  items(
    where: ParcelItemWhereInput! = {}
    orderBy: [ParcelItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ParcelItem!]
  itemsCount(where: ParcelItemWhereInput! = {}): Int
}

input ParcelWhereUniqueInput {
  id: ID
}

input ParcelWhereInput {
  AND: [ParcelWhereInput!]
  OR: [ParcelWhereInput!]
  NOT: [ParcelWhereInput!]
  id: IDFilter
  name: StringFilter
  address: StringFilter
  phoneNumber: StringFilter
  sellPrice: FloatFilter
  deliveryCharge: FloatFilter
  createdAt: DateTimeNullableFilter
  shippingMethod: StringNullableFilter
  status: StringNullableFilter
  user: UserWhereInput
  items: ParcelItemManyRelationFilter
}

input ParcelItemManyRelationFilter {
  every: ParcelItemWhereInput
  some: ParcelItemWhereInput
  none: ParcelItemWhereInput
}

input ParcelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  address: OrderDirection
  phoneNumber: OrderDirection
  sellPrice: OrderDirection
  deliveryCharge: OrderDirection
  createdAt: OrderDirection
  shippingMethod: OrderDirection
  status: OrderDirection
}

input ParcelUpdateInput {
  name: String
  address: String
  phoneNumber: String
  sellPrice: Float
  deliveryCharge: Float
  createdAt: DateTime
  shippingMethod: String
  status: String
  user: UserRelateToOneForUpdateInput
  items: ParcelItemRelateToManyForUpdateInput
}

input ParcelItemRelateToManyForUpdateInput {
  disconnect: [ParcelItemWhereUniqueInput!]
  set: [ParcelItemWhereUniqueInput!]
  create: [ParcelItemCreateInput!]
  connect: [ParcelItemWhereUniqueInput!]
}

input ParcelUpdateArgs {
  where: ParcelWhereUniqueInput!
  data: ParcelUpdateInput!
}

input ParcelCreateInput {
  name: String
  address: String
  phoneNumber: String
  sellPrice: Float
  deliveryCharge: Float
  createdAt: DateTime
  shippingMethod: String
  status: String
  user: UserRelateToOneForCreateInput
  items: ParcelItemRelateToManyForCreateInput
}

input ParcelItemRelateToManyForCreateInput {
  create: [ParcelItemCreateInput!]
  connect: [ParcelItemWhereUniqueInput!]
}

type ParcelItem {
  id: ID!
  name: String
  imageUrl: String
  price: Float
  quantity: Float
  parcel: Parcel
}

input ParcelItemWhereUniqueInput {
  id: ID
}

input ParcelItemWhereInput {
  AND: [ParcelItemWhereInput!]
  OR: [ParcelItemWhereInput!]
  NOT: [ParcelItemWhereInput!]
  id: IDFilter
  name: StringFilter
  imageUrl: StringFilter
  price: FloatFilter
  quantity: FloatFilter
  parcel: ParcelWhereInput
}

input ParcelItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  imageUrl: OrderDirection
  price: OrderDirection
  quantity: OrderDirection
}

input ParcelItemUpdateInput {
  name: String
  imageUrl: String
  price: Float
  quantity: Float
  parcel: ParcelRelateToOneForUpdateInput
}

input ParcelRelateToOneForUpdateInput {
  create: ParcelCreateInput
  connect: ParcelWhereUniqueInput
  disconnect: Boolean
}

input ParcelItemUpdateArgs {
  where: ParcelItemWhereUniqueInput!
  data: ParcelItemUpdateInput!
}

input ParcelItemCreateInput {
  name: String
  imageUrl: String
  price: Float
  quantity: Float
  parcel: ParcelRelateToOneForCreateInput
}

input ParcelRelateToOneForCreateInput {
  create: ParcelCreateInput
  connect: ParcelWhereUniqueInput
}

type Withdraw {
  id: ID!
  amount: Float
  bkashNumber: String
  status: String
  time: DateTime
  transationID: String
  user: User
}

input WithdrawWhereUniqueInput {
  id: ID
}

input WithdrawWhereInput {
  AND: [WithdrawWhereInput!]
  OR: [WithdrawWhereInput!]
  NOT: [WithdrawWhereInput!]
  id: IDFilter
  amount: FloatFilter
  bkashNumber: StringFilter
  status: StringNullableFilter
  time: DateTimeNullableFilter
  transationID: StringFilter
  user: UserWhereInput
}

input WithdrawOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  bkashNumber: OrderDirection
  status: OrderDirection
  time: OrderDirection
  transationID: OrderDirection
}

input WithdrawUpdateInput {
  amount: Float
  bkashNumber: String
  status: String
  time: DateTime
  transationID: String
  user: UserRelateToOneForUpdateInput
}

input WithdrawUpdateArgs {
  where: WithdrawWhereUniqueInput!
  data: WithdrawUpdateInput!
}

input WithdrawCreateInput {
  amount: Float
  bkashNumber: String
  status: String
  time: DateTime
  transationID: String
  user: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createParcel(data: ParcelCreateInput!): Parcel
  createParcels(data: [ParcelCreateInput!]!): [Parcel]
  updateParcel(where: ParcelWhereUniqueInput!, data: ParcelUpdateInput!): Parcel
  updateParcels(data: [ParcelUpdateArgs!]!): [Parcel]
  deleteParcel(where: ParcelWhereUniqueInput!): Parcel
  deleteParcels(where: [ParcelWhereUniqueInput!]!): [Parcel]
  createParcelItem(data: ParcelItemCreateInput!): ParcelItem
  createParcelItems(data: [ParcelItemCreateInput!]!): [ParcelItem]
  updateParcelItem(
    where: ParcelItemWhereUniqueInput!
    data: ParcelItemUpdateInput!
  ): ParcelItem
  updateParcelItems(data: [ParcelItemUpdateArgs!]!): [ParcelItem]
  deleteParcelItem(where: ParcelItemWhereUniqueInput!): ParcelItem
  deleteParcelItems(where: [ParcelItemWhereUniqueInput!]!): [ParcelItem]
  createWithdraw(data: WithdrawCreateInput!): Withdraw
  createWithdraws(data: [WithdrawCreateInput!]!): [Withdraw]
  updateWithdraw(
    where: WithdrawWhereUniqueInput!
    data: WithdrawUpdateInput!
  ): Withdraw
  updateWithdraws(data: [WithdrawUpdateArgs!]!): [Withdraw]
  deleteWithdraw(where: WithdrawWhereUniqueInput!): Withdraw
  deleteWithdraws(where: [WithdrawWhereUniqueInput!]!): [Withdraw]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  addToParcelList(
    name: String!
    address: String!
    deliveryCharge: Int!
    phoneNumber: String!
    sellPrice: Int!
    shippingMethod: String!
    parcelItems: [ProductInputForParcel!]
  ): Parcel
  changeParcelStatus(status: String!, parcelId: String!): Parcel
  withdrawRequest(amount: Int!, bkashNumber: String!): Withdraw
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  parcels(
    where: ParcelWhereInput! = {}
    orderBy: [ParcelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Parcel!]
  parcel(where: ParcelWhereUniqueInput!): Parcel
  parcelsCount(where: ParcelWhereInput! = {}): Int
  parcelItems(
    where: ParcelItemWhereInput! = {}
    orderBy: [ParcelItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ParcelItem!]
  parcelItem(where: ParcelItemWhereUniqueInput!): ParcelItem
  parcelItemsCount(where: ParcelItemWhereInput! = {}): Int
  withdraws(
    where: WithdrawWhereInput! = {}
    orderBy: [WithdrawOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Withdraw!]
  withdraw(where: WithdrawWhereUniqueInput!): Withdraw
  withdrawsCount(where: WithdrawWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

input ProductInputForParcel {
  id: ID!
  name: String!
  imageUrl: String!
  price: Int!
  quantity: Int!
  countInStock: Int!
}
